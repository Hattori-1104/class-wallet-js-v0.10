// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id    String @id @default(uuid())
  email String @unique
  name  String
  admin Boolean @default(false)

  parts       Part[]   @relation("PartStudents")
  leaderParts Part[]   @relation("PartLeaders")
  wallets     Wallet[]

  PurchaseRequestedBy          Purchase[]                   @relation("RequestedBy")
  PurchaseAccountantApprovedBy PurchaseAccountantApproval[] @relation("ApprovedBy")
  PurchaseReceiptSubmittedTo   PurchaseReceiptSubmission[]  @relation("SubmittedTo")
  subscriptions                Subscription[]
}

model Teacher {
  id    String @id @default(uuid())
  email String @unique
  name  String

  wallets                 Wallet[]
  PurchaseTeacherApproval PurchaseTeacherApproval[] @relation("ApprovedBy")
  subscriptions           Subscription[]
}

model Part {
  id     String @id @default(uuid())
  name   String
  budget Int    @default(0)

  isBazaar Boolean @default(false)

  students Student[] @relation("PartStudents")
  leaders  Student[] @relation("PartLeaders")
  walletId String
  wallet   Wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade)

  purchases Purchase[]
}

model Wallet {
  id     String @id @default(uuid())
  name   String
  budget Int

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  parts              Part[]
  teachers           Teacher[]
  accountantStudents Student[]
}

model Event {
  id      String   @id @default("nishikosai2025")
  name    String   @default("西校祭2025")
  wallets Wallet[]
}

// 購入
model Purchase {
  id            String   @id @default(uuid())
  label         String
  description   String?
  plannedUsage  Int
  
  updatedAt     DateTime @default(now()) @updatedAt
  requestedAt   DateTime @default(now())
  requestedById String
  requestedBy   Student  @relation(name: "RequestedBy", fields: [requestedById], references: [id], onDelete: Cascade)
  canceled    Boolean  @default(false)

  partId String
  part   Part   @relation(fields: [partId], references: [id], onDelete: Cascade)

  accountantApproval PurchaseAccountantApproval?
  teacherApproval    PurchaseTeacherApproval?
  completion         PurchaseCompletion?
  receiptSubmission  PurchaseReceiptSubmission?
  balance            Int                         @default(0)

  @@index([partId])
}

// 会計承認
model PurchaseAccountantApproval {
  purchaseId String   @id
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  approved Boolean  @default(false)
  byId     String
  by       Student  @relation(name: "ApprovedBy", fields: [byId], references: [id], onDelete: Cascade)
  at       DateTime @default(now()) @updatedAt
}

// 教師承認
model PurchaseTeacherApproval {
  purchaseId String   @id
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  approved       Boolean @default(false)
  receivingMoney Int?

  byId String
  by   Teacher  @relation(name: "ApprovedBy", fields: [byId], references: [id], onDelete: Cascade)
  at   DateTime @default(now()) @updatedAt
}

// 買い出し完了・使用額の報告
model PurchaseCompletion {
  purchaseId String   @id
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  actualUsage Int
  at          DateTime @default(now()) @updatedAt
}

// レシート提出
model PurchaseReceiptSubmission {
  purchaseId String   @id
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  receiptIndex Int
  submittedToId String
  submittedTo  Student? @relation(name: "SubmittedTo", fields: [submittedToId], references: [id], onDelete: Cascade)
  at           DateTime @default(now()) @updatedAt
}

// 商品データ・AIのコンテキストとして使用
model Product {
  id          String  @id @default(uuid())
  name        String
  price       Int
  description String?
  isShared    Boolean @default(false)
}

// プッシュ通知のsubscription
model Subscription {
  id           String @id @default(uuid())
  endpoint     String @db.VarChar(512) @unique
  p256dh       String
  auth         String
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Student または Teacher のいずれかに関連付け
  studentId String?
  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([teacherId])
}
