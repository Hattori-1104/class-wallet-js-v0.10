// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id    String @id @default(uuid())
  email String @unique
  name  String

  parts       Part[]   @relation("PartStudents")
  leaderParts Part[]   @relation("PartLeaders")
  wallets     Wallet[]

  PurchaseStateRequest            PurchaseStateRequest[]            @relation("RequestedBy")
  PurchaseStateAccountantApproval PurchaseStateAccountantApproval[] @relation("ApprovedBy")
}

model Teacher {
  id    String @id @default(uuid())
  email String @unique
  name  String

  wallets                      Wallet[]
  PurchaseStateTeacherApproval PurchaseStateTeacherApproval[] @relation("ApprovedBy")
}

model Part {
  id     String @id @default(uuid())
  name   String
  budget Int    @default(0)

  students Student[] @relation("PartStudents")
  leaders  Student[] @relation("PartLeaders")
  walletId String
  wallet   Wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade)

  purchases Purchase[]
}

model Wallet {
  id     String @id @default(uuid())
  name   String
  budget Int

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  parts              Part[]
  teachers           Teacher[]
  accountantStudents Student[]
}

model Event {
  id      String   @id @default(uuid())
  name    String
  wallets Wallet[]
}

model Purchase {
  id        String         @id @default(uuid())
  label     String
  items     PurchaseItem[]
  createdAt DateTime       @default(now())

  updatedAt DateTime @default(now()) @updatedAt

  partId String
  part   Part   @relation(fields: [partId], references: [id], onDelete: Cascade)

  stateId String        @unique
  state   PurchaseState @relation(fields: [stateId], references: [id], onDelete: Cascade)

  @@index([partId])
}

// 状態管理
model PurchaseState {
  id       String    @id @default(uuid())
  purchase Purchase?

  request            PurchaseStateRequest?
  accountantApproval PurchaseStateAccountantApproval?
  teacherApproval    PurchaseStateTeacherApproval?
  givenMoney         PurchaseStateGivenMoney?
  usageReport        PurchaseStateUsageReport?
  receiptSubmission  PurchaseStateReceiptSubmission?
  fishingReturned    PurchaseStateFishingReturned?
}

// リクエスト
model PurchaseStateRequest {
  stateId  String        @id
  state    PurchaseState @relation(fields: [stateId], references: [id], onDelete: Cascade)
  approved Boolean       @default(false)
  byId     String
  by       Student       @relation(name: "RequestedBy", fields: [byId], references: [id], onDelete: Cascade)
  at       DateTime      @default(now())
}

// 会計承認
model PurchaseStateAccountantApproval {
  stateId  String        @id
  state    PurchaseState @relation(fields: [stateId], references: [id], onDelete: Cascade)
  approved Boolean       @default(false)
  byId     String
  by       Student       @relation(name: "ApprovedBy", fields: [byId], references: [id], onDelete: Cascade)
  at       DateTime      @default(now())
}

// 教師承認
model PurchaseStateTeacherApproval {
  stateId  String        @id
  state    PurchaseState @relation(fields: [stateId], references: [id], onDelete: Cascade)
  approved Boolean       @default(false)
  byId     String
  by       Teacher       @relation(name: "ApprovedBy", fields: [byId], references: [id], onDelete: Cascade)
  at       DateTime      @default(now())
}

// お金の受け渡し
model PurchaseStateGivenMoney {
  stateId String        @id
  state   PurchaseState @relation(fields: [stateId], references: [id], onDelete: Cascade)
  amount  Int
  at      DateTime      @default(now())
}

// 使用額の報告
model PurchaseStateUsageReport {
  stateId     String        @id
  state       PurchaseState @relation(fields: [stateId], references: [id], onDelete: Cascade)
  actualUsage Int
  at          DateTime      @default(now())
}

// レシート提出
model PurchaseStateReceiptSubmission {
  stateId      String        @id
  state        PurchaseState @relation(fields: [stateId], references: [id], onDelete: Cascade)
  receiptIndex Int
  at           DateTime      @default(now())
}

// おつり釣り返却
model PurchaseStateFishingReturned {
  stateId String        @id
  state   PurchaseState @relation(fields: [stateId], references: [id], onDelete: Cascade)
  at      DateTime      @default(now())
}

model PurchaseItem {
  id       String @id @default(uuid())
  quantity Int    @default(1)

  purchaseId String
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Product {
  id          String  @id @default(uuid())
  name        String
  price       Int
  description String?
  isShared    Boolean @default(false)

  purchaseItems PurchaseItem[]
}
